# 값을 여러 개 출력하기
print(1, 2, 3)

# sep로 값 사이에 문자 넣기
# print(값1, 값2, sep='문자 또는 문자열')
# print(변수1, 변수2, sep='문자 또는 문자열')
print(1, 2, 3, sep=',')

# 줄 바꿈은 \n을 활용하면 된다.
print(1, 2, 3, sep='\n')

# end를 사용하면 한 줄에 여러 개의 값을 출력 가능
print(1, end=' ')
print(2, end=' ')
print(3)


# 리스트 = [값, 값, 값, ...]
a = [38, 21, 53, 62, 19]
print(a)

# 빈 리스트 만들기
# 리스트 = []
# 리스트 = list()
a = []
b = list()
print(a, b)

# range를 사용하여 리스트 만들기
# 리스트 = list(range(횟수)) // 이 경우 0 ~ (횟수-1) 까지
# 리스트 = list(range(시작, 끝)) // 끝-1 까지
a = list(range(10))
print(a)

# 등차수열 형식으로 리스트에 저장
# 리스트 = list(range(시작, 끝, 증가폭))
c = list(range(-4, 10, 2))
print(c)

# 리스트와 달리 튜플은 저장된 요소를 변경, 추가, 삭제 불가
# 튜플 = (값, 값, 값, ...)
# 튜플 = 값, 값, 값
a = (134, 23, 5, 12, 55)
print(a)

# 튜플 -> 리스트
# list(튜플)
# 리스트 -> 튜플
# tuple(리스트)
print(list(a))

'''
리스트, 튜플, range, 문자열은 모두 값이 연속적으로 이루어진 자료형이다.
공통적으로 제공되는 기능은 다음과 같다.
1. 특정 값이 있는지 확인하기(in)
2. 시퀀스 객체 연결하기(+) // range는 객체 연결 불가(이를 리스트 또는 튜플로 만들어 연결해야 함)
3. 인덱스를 사용하여 요소에 접근하기
요소에 값을 할당하거나 del로 요소를 삭제하는 것은 리스트만 가능하다.
'''
a = list(range(0, 100, 10))
print(30 in a)

b = [9, 8, 7, 6]
print(a + b)

print(b[3])

# 시퀀스 객체 반복하기
# 시퀀스객체 * 정수
print([0, 10, 20, 30] * 3)

# 시퀀스 객체의 요소 개수 구하기
# len(시퀀스객체)
print(len(a))

# range의 숫자 생성 개수 구하기
print(len(range(0, 100, 10)))

'''
시퀀스 객체의 인덱스는 항상 0부터 시작한다.
다른 프로그래밍 언어와 마찬가지이며, 인덱스의 범위도 크기-1 까지이다.
다만 python에선 음수 인덱스를 지정하여 반대로 돌려 접근할 수 있다.
-1 부터 제일 마지막 인덱스이다.
'''
a = [38, 21, 53, 62, 19]
print(a[-1])

# 슬라이스 사용하기
# 끝 인덱스는 가져오려는 범위에 포함되지 않는다.
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
print(a[0:4])

# 시퀀스객체[시작인덱스:끝인덱스:인덱스증가폭]
print(a[2:8:3])

# 시퀀스객체[:끝인덱스]
print(a[:7])

# 시퀀스객체[시작인덱스:]
print(a[7:])

# 시퀀스객체[:] // 리스트 전체를 가져오기
print(a[:])
